/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.lee.echo360.ui;

import java.awt.GridBagConstraints;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ComboBoxModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;
import org.lee.echo360.control.controllers.MainController;
import org.lee.echo360.model.ActionResult;
import org.lee.echo360.providers.BlackboardProviderWrapper;

/**
 *
 * @author Lee Symes
 */
public abstract class LoginPanel extends javax.swing.JPanel {

    private final MainController controller;
    private final Runnable RE_ENABLE_ALL_RUNNABLE = new Runnable() {
        @Override
        public void run() {
            setAllEnabled(true);
        }
    };

    /**
     * Creates new form LoginPanel
     */
    public LoginPanel(MainController controller) {
        initComponents();
        this.controller = controller;
    }

    public static ComboBoxModel getModel() {
        return ProviderModel.getModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        GridBagConstraints gridBagConstraints;

        buttonPanel = new javax.swing.JPanel();
        loginButton = new javax.swing.JButton();
        clearButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        loginInputPanel = new LoginInputPanel();

        setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED), javax.swing.BorderFactory.createEmptyBorder(4, 4, 4, 4)));
        setLayout(new java.awt.GridBagLayout());

        loginInputPanel.setListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                doUpdate();
            }
        });

        buttonPanel.setPreferredSize(new java.awt.Dimension(200, 29));
        buttonPanel.setLayout(new java.awt.GridBagLayout());

        loginButton.setMnemonic('l');
        loginButton.setText("Login");
        loginButton.setToolTipText("Login using the information provided.");
        loginButton.setEnabled(false);
        loginButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        buttonPanel.add(loginButton, gridBagConstraints);

        clearButton.setMnemonic('c');
        clearButton.setText("Clear");
        clearButton.setToolTipText("Clear the form");
        clearButton.setEnabled(false);
        clearButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 1.0;
        buttonPanel.add(clearButton, gridBagConstraints);

        cancelButton.setMnemonic('e');
        cancelButton.setText("Cancel");
        cancelButton.setToolTipText("Cancel login and exit the application.");
        cancelButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        buttonPanel.add(cancelButton, gridBagConstraints);

        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        add(buttonPanel, gridBagConstraints);
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = GridBagConstraints.BOTH;
        add(loginInputPanel, gridBagConstraints);
    }// </editor-fold>

    private void clearButtonActionPerformed(ActionEvent evt) {
        loginInputPanel.setUsername("");
        loginInputPanel.setPassword("");
        loginInputPanel.setProvider(null);
    }

    private void loginButtonActionPerformed(ActionEvent evt) {
        setAllEnabled(false);
        if (loginInputPanel.saveCredentialsTo(controller.getPropertiesController())) {
            new LoginWorker().execute();
        }
    }

    private void cancelButtonActionPerformed(ActionEvent evt) {
        setAllEnabled(false);
        try {
            cancel();
        } finally {
            SwingUtilities.invokeLater(RE_ENABLE_ALL_RUNNABLE);
        }
    }
    // Variables declaration - do not modify
    private JButton cancelButton;
    private JButton clearButton;
    private JPanel buttonPanel;
    private LoginInputPanel loginInputPanel;
    private JButton loginButton;
    // End of variables declaration

    public abstract void cancel();

    public abstract void complete();

    private void doUpdate() {
        if (SwingUtilities.getRootPane(this) != null) {
            SwingUtilities.getRootPane(this).setDefaultButton(loginButton);
        }
        boolean provExist = loginInputPanel.hasProviderSelected();
        clearButton.setEnabled(provExist);
        loginButton.setEnabled(loginInputPanel.hasValidCredentials());
    }

    private void setAllEnabled(boolean en) {
        loginButton.setEnabled(en);
        cancelButton.setEnabled(en);
        clearButton.setEnabled(en);
        loginInputPanel.setAllEnabled(en);
    }

    public void setUsername(String username) {
        loginInputPanel.setUsername(username);
    }

    public void setPassword(String password) {
        loginInputPanel.setPassword(password);
    }

    public void setProvider(BlackboardProviderWrapper provider) {
        loginInputPanel.setProvider(provider);
    }

    protected void doLogin() {
        setAllEnabled(false);
        if (loginInputPanel.saveCredentialsTo(controller.getPropertiesController())) {
            new LoginWorker().execute();
        }
    }

    private class LoginWorker extends SwingWorker<ActionResult, Void> {

        @Override
        protected void done() {
            ActionResult get = ActionResult.FAILED;
            try {
                get = this.get();
            } catch (InterruptedException ex) {
                Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ExecutionException ex) {
                Logger.getLogger(LoginPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            showErrorBox(get);
            if (get == ActionResult.SUCCEDED) {
                complete();
            }
            RE_ENABLE_ALL_RUNNABLE.run();
        }

        @Override
        protected ActionResult doInBackground() throws Exception {
            return controller.getLoginController().doLogin();
        }
    }

    public void showErrorBox(ActionResult get) {
        if (get != ActionResult.SUCCEDED) {
            JOptionPane.showMessageDialog(LoginPanel.this, contentFor(get), titleFor(get), JOptionPane.ERROR_MESSAGE);
        }
    }

    private Object contentFor(ActionResult r) {
        switch (r) {
            case NOT_CONNECTED:
                return "No internet connection detected.";
            case INVALID_CREDENTIALS:
                return new JLabel("<html>The provider has rejected your credentials<br>Please ensure they are correct and try again.");
            case FAILED:
            case FATAL:
                return "Unknown Error";
        }
        return r.toString();
    }

    private String titleFor(ActionResult r) {
        switch (r) {
            case NOT_CONNECTED:
                return "No Internet Connection";
            case INVALID_CREDENTIALS:
                return "Invalid Credentials";
            case FAILED:
            case FATAL:
                return "Unknown Error";
        }
        return r.toString();
    }
}
