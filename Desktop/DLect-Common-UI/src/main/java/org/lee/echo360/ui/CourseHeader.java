package org.lee.echo360.ui;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.List;
import java.util.concurrent.atomic.AtomicBoolean;
import javax.swing.SwingWorker;
import org.lee.echo360.control.controllers.DownloadProgressListener;
import org.lee.echo360.control.controllers.MainController;
import org.lee.echo360.model.DownloadType;
import org.lee.echo360.model.Lecture;
import org.lee.echo360.model.Subject;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author lee
 */
public class CourseHeader extends javax.swing.JPanel implements
        PropertyChangeListener, DownloadProgressListener {

    private static final Color COMPLETED_PROGRESS_COLOR = new Color(0x7295E6);
    private static final Color ALL_COMPLETED_PROGRESS_COLOR = new Color(0x68ED68);
    private static final Color DOWNLOADING_PROGRESS_COLOR = new Color(0xF9CA6D);
    private String courseName = "";
    private String lectureDescription;
    private Subject subject;
    private double progress = 0;
    private double dlInProgress = 0;
    private final ProgressUpdateWorker puw;
    private final MainController ctl;

    /**
     * Creates new form CourseHeader
     */
    public CourseHeader(MainController ctl) {
        initComponents();
        puw = new ProgressUpdateWorker(this);
        this.ctl = ctl;
        ctl.addDownloadProgressListener(this);
    }

    /**
     * Get the value of courseName
     *
     * @return the value of courseName
     */
    public String getCourseName() {
        return courseName;
    }

    /**
     * Set the value of courseName
     *
     * @param courseName new value of courseName
     */
    public void setCourseName(String courseName) {
        this.courseName = courseName;
        courseNameLabel.setText(courseName);
    }

    /**
     * Get the value of lectureDescription
     *
     * @return the value of lectureDescription
     */
    public String getLectureDescription() {
        return lectureDescription;
    }

    /**
     * Set the value of lectureDescription
     *
     * @param lectureDescription new value of lectureDescription
     */
    public void setLectureDescription(String lectureDescription) {
        this.lectureDescription = lectureDescription;
        lectureCountLabel.setText(lectureDescription);
    }

    @Override
    public void paintComponent(Graphics g) {
        super.paintComponent(g);
        Graphics2D g2 = (Graphics2D) g;
        final int w = this.getWidth();
        final int h = this.getHeight();
        final double p = progress;
        final double dp = dlInProgress;
        if (p >= 0) {
            if (p >= 1) {
                g2.setColor(ALL_COMPLETED_PROGRESS_COLOR);
                g2.fillRect(0, 0, w, h);
            } else {
                g2.setColor(COMPLETED_PROGRESS_COLOR);
                g2.fillRect(0, 0, (int) (w * p), h);
                if (dp > 0) {
                    g2.setColor(DOWNLOADING_PROGRESS_COLOR);
                    g2.fillRect((int) (w * p), 0, (int) (w * dp), h);
                }
            }
        }
        g2.setColor(this.getBackground().darker());
        g2.drawLine(0, h - 1, w, h - 1);
        g2.setColor(this.getBackground().brighter());
        g2.drawLine(0, 0, w, 0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        courseNameLabel = new javax.swing.JLabel();
        lectureCountLabel = new javax.swing.JLabel();

        setBorder(new org.lee.echo360.ui.ArrowBorder());
        setMaximumSize(new java.awt.Dimension(2147483647, 28));
        setMinimumSize(new java.awt.Dimension(38, 28));
        setPreferredSize(new java.awt.Dimension(38, 28));
        setLayout(new java.awt.GridBagLayout());

        courseNameLabel.setText("Course Name");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 0, 0);
        add(courseNameLabel, gridBagConstraints);

        lectureCountLabel.setText("No Lecures");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.VERTICAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 1.0;
        add(lectureCountLabel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel courseNameLabel;
    private javax.swing.JLabel lectureCountLabel;
    // End of variables declaration//GEN-END:variables

    public void setSubject(Subject course) {
        this.subject = course;
        course.addPropertyChangeListener(this);
        for (Lecture lecture : course.getLectures()) {
            lecture.addPropertyChangeListener(this);
        }
        updateData();
    }

    public void updateData() {
        puw.refresh();
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        if (Subject.PROP_ADDED_LECTURE.equals(evt.getPropertyName())) {
            ((Lecture) evt.getNewValue()).addPropertyChangeListener(this);
        }
        updateData();
    }

    public void refresh() {
        updateData();
    }

    @Override
    public void downloadingStarted(Subject subject) {
        if (subject.equals(this.subject)) {
            updateData();
        }
    }

    @Override
    public void downloadingFinished(Subject subject) {
        if (subject.equals(this.subject)) {
            updateData();
        }
    }

    @Override
    public void downloadStarting(Subject s, Lecture l, DownloadType t) {
        if (s.equals(this.subject)) {
            updateData();
        }
    }

    @Override
    public void downloadCompleted(Subject s, Lecture l, DownloadType t) {
        if (s.equals(this.subject)) {
            updateData();
        }
    }

    private class ProgressUpdateWorker extends SwingWorker<Void, Boolean> {

        private int numberDownloaded;
        private int totalDownloads;
        private int numLectures = -1;
        private final CourseHeader h;
        private final AtomicBoolean shutdown = new AtomicBoolean(false);

        public ProgressUpdateWorker(CourseHeader h) {
            this.h = h;
        }

        @Override
        protected void process(List<Boolean> chunks) {
            updateNums();
            h.repaint();
        }

        protected void requestShutdown() {
            shutdown.set(true);
            synchronized (this) {
                this.notifyAll();
            }
        }

        @Override
        protected Void doInBackground() throws Exception {
            return null;
        }

        private void updateDownloadedCount() {
            int dlComp = 0;
            int dlTot = 0;
            for (Lecture l : h.subject.getLectures()) {
                for (DownloadType dt : DownloadType.values()) {
                    if (l.isDownloadEnabledOrPresentAndEnabled(dt)) {
                        dlTot++;
                        if (l.isFilePresent(dt)) {
                            dlComp++;
                        }
                    }
                }
            }
            numberDownloaded = dlComp;
            totalDownloads = dlTot;
        }

        private void updateNums() {
            updateDescriptions();
            int downloadsInProgress = ctl.getSubjectLecutreDownloading(subject).size();
            updateDownloadedCount();
            if (totalDownloads > 0) {
                h.progress = ((double) numberDownloaded) / totalDownloads;
                h.dlInProgress = ((double) downloadsInProgress) / totalDownloads;
            } else {
                h.progress = -1;
                h.dlInProgress = 0;
            }
        }

        private void updateDescriptions() {

            final int n = h.subject.getLectures().size();
            if (n != numLectures) {
                numLectures = n;
                if (numLectures > 0) {
                    h.setLectureDescription(numLectures + " Lecture" + (numLectures == 1 ? "" : "s") + " Found");
                } else {
                    h.setLectureDescription("No Lectures Found");
                }
                h.setCourseName(h.subject.getName());
            }
        }

        private void refresh() {
            publish(true);
        }
    }
}
