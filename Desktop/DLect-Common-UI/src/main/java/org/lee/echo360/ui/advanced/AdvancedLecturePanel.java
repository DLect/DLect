/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.lee.echo360.ui.advanced;

import com.google.common.collect.HashBasedTable;
import com.google.common.collect.Table;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.EnumMap;
import java.util.List;
import java.util.Map;
import java.util.SortedSet;
import javax.swing.BorderFactory;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.SwingConstants;
import javax.swing.border.Border;
import javax.swing.border.CompoundBorder;
import javax.swing.border.EmptyBorder;
import javax.swing.border.MatteBorder;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.lang3.tuple.Pair;
import org.lee.echo360.control.controllers.DownloadProgressListener;
import org.lee.echo360.control.controllers.MainController;
import org.lee.echo360.model.DownloadType;
import org.lee.echo360.model.Lecture;
import org.lee.echo360.model.Stream;
import org.lee.echo360.model.Subject;
import org.lee.echo360.ui.util.WrappingUtil;
import org.lee.echo360.util.StringUtil;

/**
 *
 * @author lee
 */
public class AdvancedLecturePanel extends SubjectPreferencesPanel implements DownloadProgressListener, PropertyChangeListener {

    private final Subject s;
    private final MainController c;
    private JLabel jLabel1;
    private Map<DownloadType, JLabel> tableHeadings = new EnumMap<DownloadType, JLabel>(DownloadType.class);
    private final Table<Lecture, DownloadType, Pair<JCheckBox, JButton>> checkBoxMapping = HashBasedTable.create();
    private final String dateFormat = "yyyy/MM/dd HH:mm";
    private Font boldFont, standardFont;

    /**
     * Creates new form AdvancedLecturePanel
     */
    public AdvancedLecturePanel(Subject s, MainController c) {
        super(s, c);
        this.s = s;
        this.c = c;
        initComponents();
        initSubjectLectures();
        c.addDownloadProgressListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {
        jLabel1 = new javax.swing.JLabel();
        final Font labelFont = jLabel1.getFont().deriveFont(jLabel1.getFont().getSize() + 2f);


        jLabel1.setFont(labelFont);
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Lecture");
        jLabel1.setBorder(BorderFactory.createMatteBorder(0, 0, 1, 1, Color.BLACK));


        for (DownloadType downloadType : DownloadType.values()) {
            JLabel label = new JLabel(downloadType.toString());
            label.setFont(labelFont);
            label.setHorizontalAlignment(SwingConstants.CENTER);
            label.setBorder(BorderFactory.createMatteBorder(0, 1, 1, 1, Color.BLACK));

            tableHeadings.put(downloadType, label);
        }
        setLayout(new GridBagLayout());
        addComponents();
    }

    private void addComponents() {
        GridBagConstraints gridBagConstraints;
        gridBagConstraints = new GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        add(jLabel1, gridBagConstraints);
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.weightx = 0;
        for (JLabel label : tableHeadings.values()) {
            add(label, gridBagConstraints);
            gridBagConstraints.gridx += 2;
        }
    }

    private void initSubjectLectures() {
        SortedSet<Lecture> lectures = s.getLectures();
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridy = 2;
        gbc.fill = GridBagConstraints.BOTH;
        standardFont = this.getFont();
        boldFont = standardFont.deriveFont(Font.BOLD);
        Border labelBorder = new CompoundBorder(new MatteBorder(0, 0, 1, 1, Color.BLACK), new EmptyBorder(0, 1, 1, 2));
        for (Lecture l : lectures) {
            String name = StringUtil.formatDate(dateFormat, l.getTime()) + formatStreams(" [", l, "]");
            JLabel la = new JLabel(name);
            JPanel lp = WrappingUtil.wrapCenterBothFill(la, labelBorder);
            gbc.gridx = 0;
            gbc.weightx = 1.;
            this.add(lp, gbc);
            for (DownloadType dt : DownloadType.values()) {
                addDownloadType(l, dt, gbc);
            }
            gbc.gridy++;
        }
    }

    private static String formatStreams(String prefix, Lecture l, String postfix) {
        List<Stream> s = l.getStreams();
        List<String> str = new ArrayList<String>();
        for (Stream stream : s) {
            if (stream.isActualStream()) {
                str.add(stream.getName());
            }
        }
        if (str.isEmpty()) {
            return "";
        }
        StringBuilder b = new StringBuilder(prefix);
        b.append(StringUtils.join(str, ", "));
        return b.append(postfix).toString();
    }

    private void addDownloadType(Lecture l, DownloadType dt, GridBagConstraints gbc) {
        Border checkBorder = new MatteBorder(0, 1, 1, 0, Color.BLACK);
        Border buttonBorder = new MatteBorder(0, 1, 1, 1, Color.BLACK);
        boolean dling = isEnabled(l, dt);
        boolean dled = l.isFilePresent(dt);
        JCheckBox enabledCheck = new JCheckBox();
        enabledCheck.setEnabled(!dled);
        enabledCheck.setSelected(dling);

        gbc.gridx++;
        gbc.weightx = 0;
        this.add(WrappingUtil.wrapCenterNoFill(enabledCheck, checkBorder), gbc);

        JButton dlButton = new JButton(dled ? "Downloaded" : "Download");
        dlButton.setEnabled(!dled);

        gbc.gridx++;
        this.add(WrappingUtil.wrapCenterNoFill(dlButton, buttonBorder), gbc);

        Pair<JCheckBox, JButton> p = Pair.of(enabledCheck, dlButton);
        checkBoxMapping.put(l, dt, p);

        DownloadActionListener a = DownloadActionListener.create(s, l, dt, c, this);
        enabledCheck.addActionListener(a);
        dlButton.addActionListener(a);
    }

    @Override
    public void downloadingStarted(Subject subject) {
        //No Op
    }

    @Override
    public void downloadingFinished(Subject subject) {
        // No Op
    }

    @Override
    public void downloadStarting(Subject s, Lecture l, DownloadType t) {
        if (s.equals(this.s)) {
            Pair<JCheckBox, JButton> pair = checkBoxMapping.get(l, t);
            pair.getLeft().setEnabled(false);
            pair.getLeft().setSelected(true);
            pair.getRight().setEnabled(false);
            pair.getRight().setText("Downloading");
            pair.getRight().setFont(boldFont);
        }
    }

    @Override
    public void downloadCompleted(Subject s, Lecture l, DownloadType t) {
        if (s.equals(this.s)) {
            boolean dled = l.isFilePresent(t);
            Pair<JCheckBox, JButton> pair = checkBoxMapping.get(l, t);
            pair.getLeft().setEnabled(!dled);
            pair.getLeft().setSelected(dled);
            pair.getRight().setEnabled(!dled);
            pair.getRight().setText(dled ? "Downloaded" : "Download");
            pair.getRight().setFont(standardFont);
        }
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        DownloadActionListener d = (DownloadActionListener) evt.getSource();
        Pair<JCheckBox, JButton> pair = checkBoxMapping.get(d.getL(), d.getDt());
        pair.getLeft().setSelected(isEnabled(d.getL(), d.getDt()));
    }

    @Override
    public void doPreShow() {
        // TODO write
    }

    @Override
    public String getTabName() {
        return "Lectures";
    }

    @Override
    public String getTabTooltip() {
        return "Download individual lectures";
    }

    public boolean isEnabled(Lecture l, DownloadType dt) {
        return l.isDownloadEnabledOrPresentAndEnabled(dt);
    }
}
