package org.lee.echo360.ui;

import org.lee.echo360.ui.prefs.PreferencesDialog;
import java.awt.GridBagConstraints;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.Map;
import java.util.SortedMap;
import java.util.SortedSet;
import java.util.TreeMap;
import java.util.TreeSet;
import javax.swing.SwingUtilities;
import org.lee.echo360.control.ControllerAction;
import org.lee.echo360.control.ControllerListener;
import org.lee.echo360.control.controllers.DownloadProgressListener;
import org.lee.echo360.control.controllers.MainController;
import org.lee.echo360.control.controllers.PropertiesController;
import org.lee.echo360.model.ActionResult;
import org.lee.echo360.model.Blackboard;
import org.lee.echo360.model.DownloadType;
import org.lee.echo360.model.Lecture;
import org.lee.echo360.model.Subject;
import org.lee.echo360.ui.prefs.PreferencesDialogImpl;
import org.lee.echo360.util.SubjectHelper;
import org.lee.echo360.util.ThreadUtil;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author lee
 */
public class CoursesScreen extends javax.swing.JPanel implements
        ControllerListener, DownloadProgressListener, PropertyChangeListener {

    private final SortedSet<Subject> allSubjects;
    private final SortedMap<Subject, CoursePane> shownSubjects;
    private final GridBagConstraints defaultCourseConstraints;
    private final MainController controller;
    private final DownloadButtonDotter dbd;
    private PreferencesDialog prefsDialog;

    /**
     * Creates new form CoursesScreen
     */
    public CoursesScreen(MainController controller) {
        this.controller = controller;
        initComponents();
        defaultCourseConstraints = new GridBagConstraints();
        defaultCourseConstraints.gridx = 0;
        defaultCourseConstraints.weightx = 1;
        defaultCourseConstraints.fill = GridBagConstraints.HORIZONTAL;
        defaultCourseConstraints.anchor = GridBagConstraints.NORTH;
        shownSubjects = new TreeMap<Subject, CoursePane>();
        allSubjects = new TreeSet<Subject>();
        dbd = new DownloadButtonDotter(downloadAllButton);
        dbd.start();
        controller.addControllerListener(this);
        controller.addDownloadProgressListener(this);
    }

    public void addAllSubjects(final Collection<Subject> itt) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                allSubjects.addAll(itt);
                updateCoursePanelPositions();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        bottomPanel = new javax.swing.JPanel();
        jSeparator1 = new javax.swing.JSeparator();
        jButton1 = new javax.swing.JButton();
        downloadAllButton = new javax.swing.JButton();
        coursesScrollPane = new javax.swing.JScrollPane();
        scrollPanelContainer = new javax.swing.JPanel();
        courseContainer = new javax.swing.JPanel();

        setMinimumSize(new java.awt.Dimension(400, 300));
        setLayout(new java.awt.GridBagLayout());

        bottomPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 10;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        bottomPanel.add(jSeparator1, gridBagConstraints);

        jButton1.setMnemonic('p');
        jButton1.setText("Preferences");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        bottomPanel.add(jButton1, gridBagConstraints);

        downloadAllButton.setText("Download All");
        downloadAllButton.setEnabled(false);
        downloadAllButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downloadAllButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        bottomPanel.add(downloadAllButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(bottomPanel, gridBagConstraints);

        coursesScrollPane.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        scrollPanelContainer.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        scrollPanelContainer.setLayout(new java.awt.GridBagLayout());

        courseContainer.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        scrollPanelContainer.add(courseContainer, gridBagConstraints);

        coursesScrollPane.setViewportView(scrollPanelContainer);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(coursesScrollPane, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void downloadAllButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downloadAllButtonActionPerformed
        ThreadUtil.runExecution(new Runnable() {
            @Override
            public void run() {
                controller.getDownloadController().downloadAllSelected(new ArrayList<Subject>(shownSubjects.keySet()));
            }
        });
    }//GEN-LAST:event_downloadAllButtonActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        if (prefsDialog == null) {
            prefsDialog = new PreferencesDialogImpl(SwingUtilities.getWindowAncestor(this), controller);
            prefsDialog.setLocationRelativeTo(this);
        }
        prefsDialog.setLocationByPlatform(true);
        prefsDialog.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel bottomPanel;
    private javax.swing.JPanel courseContainer;
    private javax.swing.JScrollPane coursesScrollPane;
    private javax.swing.JButton downloadAllButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel scrollPanelContainer;
    // End of variables declaration//GEN-END:variables

    private void updateCoursePanelPositions() {
        GridBagConstraints tC = (GridBagConstraints) defaultCourseConstraints.clone();
        tC.gridy = 0;
        for (Subject subject : allSubjects) {
            subject.removePropertyChangeListener(this);
            subject.addPropertyChangeListener(this);
            if (subject.isDownloadEnabled()) {
                CoursePane pane = shownSubjects.get(subject);
                if (pane == null) {
                    pane = new CoursePane(controller);
                    pane.setSubject(subject);
                    shownSubjects.put(subject, pane);
                }
                courseContainer.remove(pane);
                courseContainer.add(pane, tC);
                tC.gridy++;
            } else {
                if (shownSubjects.containsKey(subject)) {
                    courseContainer.remove(shownSubjects.remove(subject));
                }
            }
        }
        for (Iterator<Map.Entry<Subject, CoursePane>> it = shownSubjects.entrySet().iterator(); it.hasNext();) {
            Map.Entry<Subject, CoursePane> es = it.next();
            if (!allSubjects.contains(es.getKey())) {
                es.getKey().removePropertyChangeListener(this);
                courseContainer.remove(es.getValue());
                it.remove();
            }
        }
        courseContainer.validate();
        courseContainer.invalidate();
        coursesScrollPane.invalidate();
        coursesScrollPane.validate();
    }

    private void updateButtonState() {
        if (!controller.getCurrentlyDownloadingSubjects().isEmpty() || !controller.getSubjectLecutreDownloading().isEmpty()) {
            dbd.updateAndStart("Downloading");
        } else if (!controller.hasCompleted(ControllerAction.LECTURES)) {
            dbd.updateAndStart("Loading Data");
        } else {
            switch (SubjectHelper.getSubjectsSelectionState(allSubjects)) {
                case ALL_DOWNLOADED:
                    dbd.stop();
                    downloadAllButton.setText("All Downloaded");
                    downloadAllButton.setEnabled(false);
                    break;
                case NONE_SELECTED:
                    dbd.stop();
                    downloadAllButton.setText("None Selected");
                    downloadAllButton.setEnabled(false);
                    break;
                default:
                    dbd.stop();
                    downloadAllButton.setText("Download All");
            }
        }
    }

    @Override
    public void start(final ControllerAction action) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                updateButtonState();
            }
        });
    }

    @Override
    public void finished(final ControllerAction action, final ActionResult ar) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                PropertiesController c = controller.getPropertiesController();
                final Blackboard b = c.getBlackboard();
                switch (action) {
                    case COURSES:
                        allSubjects.clear();
                        addAllSubjects(b.getSubjects());
                        break;
                }
                updateButtonState();
            }
        });
    }

    @Override
    public void error(Throwable thrwbl) {
        //No Op
    }

    @Override
    public void downloadingStarted(Subject subject) {
        updateButtonState();
    }

    @Override
    public void downloadingFinished(Subject subject) {
        updateButtonState();
    }

    @Override
    public void downloadStarting(Subject s, Lecture l, DownloadType t) {
        updateButtonState();
    }

    @Override
    public void downloadCompleted(Subject s, Lecture l, DownloadType t) {
        updateButtonState();
    }

    @Override
    public void propertyChange(PropertyChangeEvent evt) {
        updateButtonState();
        if (evt.getPropertyName().equals(Subject.PROP_DOWNLOAD_ENABLED)) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    updateCoursePanelPositions();
                }
            });
        }
    }
}
